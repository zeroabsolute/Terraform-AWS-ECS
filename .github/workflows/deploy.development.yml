name: 'Deploy to Development'

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: infrastructure/development
    steps:
      - uses: actions/checkout@v2
      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v1
      #   with:
      #     cli_config_credentials_token: ${{ secrets.TF_API_KEY }}
      # - name: Terraform Format
      #   id: fmt
      #   run: terraform fmt -check
      # - name: Terraform Init
      #   id: init
      #   run: terraform init
      # - name: Terraform Plan
      #   id: plan
      #   if: github.event_name == 'pull_request'
      #   run: terraform plan -no-color
      #   continue-on-error: true
      # - name: Update Pull Request
      #   uses: actions/github-script@0.9.0
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      #       <details><summary>Show Plan</summary>
      #       \`\`\`${process.env.PLAN}\`\`\`
      #       </details>
      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })
      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1
      # - name: Terraform Apply
      #   if: github.event_name == 'push'
      #   run: terraform apply -auto-approve
      - name: Terraform Output
        id: output
        if: github.event_name == 'push'
        run: |
          output=world
          echo "Hello"
          echo "Hello ${output}"
  #   outputs:
  #     WEB_CLIENT_DOMAIN_DEV: ${{ steps.output.outputs.WEB_CLIENT_DOMAIN_DEV }}
  #     WEB_ADMIN_DOMAIN_DEV: ${{ steps.output.outputs.WEB_ADMIN_DOMAIN_DEV }}
  # build_web_client:
  #   name: 'Build Web Client'
  #   runs-on: ubuntu-latest
  #   needs: terraform
  #   steps:
  #   - run: echo ${{needs.terraform.outputs.WEB_CLIENT_DOMAIN_DEV}}
  # build_web_admin:
  #   name: 'Build Web Admin'
  #   runs-on: ubuntu-latest
  #   needs: terraform
  #   steps:
  #   - run: echo ${{needs.terraform.outputs.WEB_ADMIN_DOMAIN_DEV}}